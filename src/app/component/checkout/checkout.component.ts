import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { Order, OrderStatus } from 'src/app/models/order';
import { OrderItem } from 'src/app/models/order-item';
import { OrdersService } from 'src/app/service/order.service';
import { SharedDataService } from 'src/app/service/shared-data.service';

@Component({
  selector: 'app-checkout',
  templateUrl: './checkout.component.html',
  styleUrls: ['./checkout.component.css']
})
export class CheckoutComponent implements OnInit {

  orderItems: OrderItem[] = [];
  deliveryAddress: string = '';

  gstRate: number = 0.18; // Example GST rate (18%)
  platformCharge: number = 50; // Example platform charge
  deliveryCharge: number = 30; // Example delivery charge

  constructor(
    private router: Router,
    private orderService: OrdersService,
    private sharedDataService: SharedDataService
  ) {
    const navigation = this.router.getCurrentNavigation();
    this.orderItems = navigation?.extras?.state?.['orderItems'] || [];
  }

  ngOnInit(): void {
    this.startCheckoutTimeout();
  }

  startCheckoutTimeout(): void {
    setTimeout(() => {
      this.emptyCheckout();
      this.router.navigate(['/cart']); // Redirect to the cart page
      alert('Checkout session expired. You have been redirected to the cart.');
    }, 100000000); // 
  }

  emptyCheckout(): void {
    this.orderItems = [];
  }

  calculateTotalPrice(): number {
    return this.orderItems.reduce((sum, item) => sum + (item.totalPrice || 0), 0);
  }

  calculateGST(): number {
    const total = this.calculateTotalPrice();
    return total * this.gstRate;
  }

  calculateGrandTotal(): number {
    const total = this.calculateTotalPrice();
    const gst = this.calculateGST();
    return total + gst + this.platformCharge + this.deliveryCharge;
  }

  placeOrder(): void {
    if (this.orderItems.length === 0) {
      alert('No items in the cart.');
      return;
    }

    if (!this.deliveryAddress) {
      alert('Please enter a delivery address.');
      return;
    }

    const grandTotal = this.calculateGrandTotal();
    const userId = this.orderItems[0].userId;

    if (typeof userId !== 'number') {
      console.error('Invalid user ID');
      alert('Invalid user ID. Please try again.');
      return;
    }
    const gst = this.calculateGST();
    const order: Order = {
      orderId: 0, // Will be generated by the backend
      orderStatus: OrderStatus.PENDING, // Using the enum for status
      user: userId, // Dynamically assign userId from order items
      restaurant: 1,  // Assuming Restaurant has an id field
      orderItems: this.orderItems,
      orderDateAndTime: new Date().toISOString(),
      platformCharge:this.platformCharge,
      gst:this.gstRate,
      deliveryCharge:this.deliveryCharge,
      deliveryAddress: this.deliveryAddress, // Add the delivery address
      grandTotalPrice: grandTotal // Add grand total to the order
    };
    console.log('Order placed successfully', order);
    this.sharedDataService.setOrder(order);
    this.sharedDataService.setGstAmount(order.gst);
    this.sharedDataService.setTotalPrice(grandTotal);
    this.sharedDataService.setPlatformCharge(this.platformCharge);
    this.sharedDataService.setDeliveryCharge(this.deliveryCharge);
    this.router.navigate(['payment'], { state: { order } });
    // this.orderService.saveOrder(order).subscribe(
    //   (savedOrder) => {
    //     console.log('Order placed successfully', savedOrder);
    //     this.router.navigate(['payment'], { state: { order: savedOrder } });
    //   },
    //   (error) => {
    //     console.error('Error placing order', error);
    //     alert('Error placing order. Please try again.');
    //   }
    // );
  }

  cancelOrder(): void {
    this.router.navigate(['/cart']); // Redirect to cart page
  }
}